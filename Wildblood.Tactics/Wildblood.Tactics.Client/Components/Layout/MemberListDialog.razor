@namespace Wildblood.Tactics.Client.Components.Layout

﻿@using Wildblood.Tactics.Models
<MudDialog>  
    <TitleContent>  
        <MudText>Member List</MudText>  
    </TitleContent>  
    <DialogContent>  
        <MudDataGrid ReadOnly="false" T="MemberRole" Items="@Members" EditMode="DataGridEditMode.Cell" EditTrigger="DataGridEditTrigger.Manual">  
            <Columns>  
                <PropertyColumn Property="member => member.Name" Editable="true"/>  
                <PropertyColumn Property="member => member.Roles" Editable="true">
                    <EditTemplate>  
                        <MudSelect @bind-Value="context.Item.Roles" T="Role" Variant="Variant.Outlined" Color="Color.Primary">  
                            @foreach (var role in Enum.GetValues<Role>())  
                            {  
                                <MudSelectItem Value="@role">@role.ToString()</MudSelectItem>  
                            }  
                        </MudSelect>  
                    </EditTemplate>  
                </PropertyColumn>  
            </Columns>  
        </MudDataGrid>  
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddRow">Mitglied hinzufügen</MudButton>  
    </DialogContent>  
    <DialogActions>  
        <MudButton OnClick="Cancel">Cancel</MudButton>  
        <MudButton OnClick="Save">Save</MudButton>  
    </DialogActions>  
</MudDialog>  

@code {  
    [CascadingParameter]  
    public IMudDialogInstance MudDialog { get; set; }  

    [Parameter]  
    public List<MemberRole> Members { get; set; }  

    private void AddRow()  
    {  
        Members.Add(new() {Name="", Roles=Role.Guest});  
    }  

    private void Cancel() => MudDialog.Cancel();  

    private void Save() => MudDialog.Close(DialogResult.Ok(Members));  
}
