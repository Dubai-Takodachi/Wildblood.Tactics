@page "/Tactics/{ID}"
@namespace Wildblood.Tactics.Components.Pages
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using MongoDB.Bson
@using System.Text.Json
@using Wildblood.Tactics.Entities
@using MongoDB.Driver;
@using Wildblood.Tactics.Models
@using Icon = Wildblood.Tactics.Entities.Icon
@using Wildblood.Tactics.Components.Layout
@using Wildblood.Tactics.Services
@inject IJSRuntime JS;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager
@inject ITacticRepository repo;

@rendermode InteractiveServer

@if (tactic == null)
{
    <div>Loading</div>
    return;
}

<div class="parent">
    <div style="grid-area: 1/1/6/2;" id="tacticsCanvasContainer">
        @*Width and Height is set via JS (=> 100% of size of parent container)*@
        <canvas id="tacticsCanvas" width="100%" height="100%" style="border:1px solid #000000;" @onmousedown="MouseDown" @onmouseup="DragStop" @onmousemove="DragMove" @onmousewheel="MouseScroll"></canvas>
        <img id="dragImage" src="" style="display:none" @onmouseup="DragStop"/>
    </div>
    <MudCard Style="grid-area: 1/2/6/3">
        <div id="MapSelectionDiv">
            <MudSelect T="string" Label="Maps" ValueChanged="MapChanged">
                @foreach (var map in maps)
                {
                    <MudSelectItem Value="@map">@map</MudSelectItem>
                }
            </MudSelect>
        </div>
        <MudPaper style="grid-area:2/2/span 3/2">
            <MudTabs>
                <MudTabPanel Icon="@swordsIcon" @onclick="() => ChangeTool(IconType.Unit)">
                    <div>
                        @*Unit*@
                        <MudPaper Class="flex-wrap d-flex" Width="300px">
                            @foreach (var unit in units)
                            {
                                <MudPaper Class="ma-1" @onclick="@(async (args) => await SelectedUnitChanged(unit))">
                                    <img src="/ConquerorsBladeData/Units/@unit" height="40" width="40" />
                                </MudPaper>

                            }
                        </MudPaper>
                    </div>
                </MudTabPanel>
                <MudTabPanel Icon="@vectorLineIcon" @onclick="() => ChangeTool(IconType.StraightLine)">
                    <MudPaper>
                        <MudColorPicker Label="Line Color" @bind-Text="colorValue" />
                    </MudPaper>
                </MudTabPanel>
            </MudTabs>
        </MudPaper>


        <div style="grid-area: 5/2/span 3/2; overflow-y: scroll; min-height:200px">
            <MudPaper>
                <MudTreeView T="Tactic" Hover="true" Dense="true" ExpandOnClick="true">
                    <MudTreeViewItem Icon="@Icons.Material.Outlined.Map">
                        <BodyContent>
                            <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                <MudText>@tactic.Name</MudText>
                                <div style="justify-self: end;">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="@(async (args) => await OnClickTacticRename())" />
                                    <MudIconButton Icon="@Icons.Material.Filled.AddBox" @onclick="@(async (args) => await OnAddFolder())" />
                                </div>
                            </div>
                        </BodyContent>
                        <ChildContent>
                            @foreach (var folder in tactic.Folders)
                            {
                                <MudTreeViewItem Icon="@Icons.Material.Filled.Folder">
                                    <BodyContent>
                                        <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                            <MudText>@folder.Name</MudText>
                                            <div style="justify-self: end;">
                                                <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="@(async (args) => await OnClickFolderRename(folder.Id))" />
                                                <MudIconButton Icon="@Icons.Material.Filled.AddBox" @onclick="@(async (args) => await OnAddSlide(folder.Id))" />
                                            </div>
                                        </div>
                                    </BodyContent>
                                    <ChildContent>
                                        @foreach (var slide in folder.Slides)
                                        {
                                            <MudTreeViewItem Icon="@Icons.Material.Filled.Notes" @onclick="@(async (args) => await OnSelectedSlideChange(slide, folder))">
                                                <BodyContent>
                                                    <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                                        <MudText>@slide.Name</MudText>
                                                        <div style="justify-self: end;">
                                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="@(async (args) => await OnClickSlideRename(slide.Id, folder.Id))" />
                                                        </div>
                                                    </div>
                                                </BodyContent>
                                            </MudTreeViewItem>
                                        }
                                    </ChildContent>
                                </MudTreeViewItem>
                            }
                        </ChildContent>
                    </MudTreeViewItem>
                </MudTreeView>
            </MudPaper>
            <MudPaper>
                <MudIconButton Icon="@Icons.Material.Filled.ZoomOut" @onclick="() => SetZoom(zoomLevel - 0.1)"></MudIconButton>
                <span>@zoomLevel.ToString("0.0")x</span>
                <MudIconButton Icon="@Icons.Material.Filled.ZoomIn" @onclick="() => SetZoom(zoomLevel + 0.1)">+</MudIconButton>
            </MudPaper>
        </div>
    </MudCard>
</div>

@code {



    [Parameter]
    public string? ID { get; set; }

    private HubConnection? hubConnection;
    private Tactic tactic = null!;
    private string colorValue;
    private Slide currentSlide;
    private Folder currentFolder;
    private IconType currentTool = IconType.Unit;
    private IconType currentDraggingType = IconType.Unit;
    private static string baseMapPath = "wwwroot/ConquerorsBladeData/Maps";
    private static string baseUnitPath = "wwwroot/ConquerorsBladeData/Units";
    private string selectedUnit;

    private List<string> maps = new List<string>();
    private List<string> units = new List<string>();
    private Icon draggingIcon;
    private Icon drawableIcon;
    private bool drawingShape = false;
    private bool isDragging = false;
    private int draggingIconIndex;
    private Point lastLineDragPosition = null!;
    private bool needsCanvasRedraw = false;
    private double zoomLevel = 1.0;
    private bool isPanning = false;
    private double panStartX, panStartY;
    private double panOriginX, panOriginY;
    private double panX = 0, panY = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        maps = Directory.EnumerateFiles(baseMapPath, "*", SearchOption.AllDirectories)
            .Select(f => Path.GetFileName(f)
            .Split('.')[0])
            .ToList();
        units = Directory.EnumerateFiles(baseUnitPath, "*", SearchOption.AllDirectories)
            .Select(f => Path.GetFileName(f))
            .ToList();
    }

    protected override async void OnParametersSet()
    {
        if (ID != null)
        {
            tactic = repo.GetTactic(ID) ?? throw new Exception("Could not load tactic");
            currentFolder = tactic.Folders[0];
            currentSlide = currentFolder.Slides[0];
            colorValue = "#000000";
        }

        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/tacticsHub"), options =>
        {
            options.HttpMessageHandlerFactory = handler =>
            {
                if (handler is HttpClientHandler clientHandler)
                {
                    clientHandler.ServerCertificateCustomValidationCallback =
                        HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
                }
                return handler;
            };
        })
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<string, object, object, object>(
            "ReceiveTacticUpdate", async (tacticId, updatedData, slideId, folderId) =>
        {
            if (tacticId == ID)
            {
                Console.WriteLine($"Received update for tactic {tacticId}");
                var json = updatedData.ToString();
                var slideStringId = slideId.ToString();
                var folderStringId = folderId.ToString();
                var options = new JsonSerializerOptions()
                {
                    PropertyNameCaseInsensitive = true,
                };

                tactic = JsonSerializer.Deserialize<Tactic>(json!, options)!;

                if (slideStringId == currentSlide.Id && folderStringId == currentFolder.Id)
                {
                    currentSlide = tactic.Folders
                        .Single(folder => folder.Id == folderStringId).Slides
                        .Single(slide => slide.Id == slideStringId);
                    currentFolder = tactic.Folders.Single(folder => folder.Id == folderStringId);
                    needsCanvasRedraw = true;
                }
                await InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<string, string>("ReceiveTacticLock", async (tacticId, userId) =>
        {
            if (tacticId == ID)
            {
                Console.WriteLine($"Tactic {tacticId} locked by user {userId}");
            }
        });

        hubConnection.On<string>("ReceiveTacticUnlock", async (tacticId) =>
        {
            if (tacticId == ID)
            {
                Console.WriteLine($"Tactic {tacticId} unlocked");
            }
        });

        await hubConnection.StartAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setCanvasSize", "tacticsCanvas");
            var imageFilePaths = Directory.EnumerateFiles(baseUnitPath, "*.*", SearchOption.AllDirectories)
                .Where(file => new[] { ".png", ".jpg", ".jpeg", ".gif", ".bmp" }.Contains(Path.GetExtension(file).ToLower()))
                .Select(file => file.Replace("wwwroot", ""))
                .ToList();
            await JS.InvokeVoidAsync("preLoadImages", imageFilePaths);
            if (currentSlide.MapPath != null)
            {
                await JS.InvokeVoidAsync("setBackground", currentSlide.MapPath);
            }

            if (currentSlide.Icons.Any())
            {
                await JS.InvokeVoidAsync("draw", currentSlide.Icons);
            }
        }

        if (needsCanvasRedraw)
        {
            needsCanvasRedraw = false;
            await ReDrawCanvas();
        }
    }

    public Task SelectedUnitChanged(string unit)
    {
        selectedUnit = unit;
        return Task.CompletedTask;
    }

    public async Task MapChanged(string map)
    {
        currentSlide.MapPath = map;
        await JS.InvokeVoidAsync("setBackground", map);
        await repo.UpdateMap(tactic, currentFolder.Id, currentSlide.Id, map);
    }

    private async Task PlaceIcon(Point pos)
    {
        var unit = new Icon
        {
            Points = [pos, new Point(pos.X + 40, pos.Y + 40)],
            FilePath = "/ConquerorsBladeData/Units/" + selectedUnit,
            Type = IconType.Unit,
            Color = colorValue,
        };

        await JS.InvokeVoidAsync("placeIcon", unit);

        currentSlide.Icons.Add(unit);
        await repo.CreateIcon(tactic, currentFolder.Id, currentSlide.Id, unit);
        await UpdateTactic();
    }

    private async Task MouseDown(MouseEventArgs eventArgs)
    {
        if (eventArgs.Button == 1)
        {
            isPanning = true;
            panStartX = eventArgs.ClientX;
            panStartY = eventArgs.ClientY;

            // Get current pan from JS (optional, if you want to sync)
            var pan = await JS.InvokeAsync<Point>("getPan");
            panOriginX = pan.X;
            panOriginY = pan.Y;
            return;
        }
        var pos = await JS.InvokeAsync<Point>("getLogicalMousePosition", "tacticsCanvas", eventArgs.ClientX, eventArgs.ClientY);

        foreach (var icon in currentSlide.Icons)
        {
            if (CheckLineClicked(pos, icon) ||
                CheckUnitClicked(pos, icon))
            {
                draggingIcon = icon with {};
                draggingIconIndex = currentSlide.Icons.IndexOf(icon);
                isDragging = true;
                lastLineDragPosition = pos;
                await JS.InvokeVoidAsync("startDrag", draggingIcon, pos.X, pos.Y);
                currentSlide.Icons.Remove(icon);
                currentDraggingType = icon.Type;
                return;
            }
        }
        switch (currentTool)
        {
            case IconType.Unit:
                await PlaceIcon(pos);
                return;
            case IconType.StraightLine:
                SetStartPointForArrow(pos);
                drawingShape = true;
                return;
        }
    }

    private static double LineSegmentSDF(Point p, Point start, Point end, double width)
    {
        var lineLengthX = end.X - start.X;
        var lineLengthY = end.Y - start.Y;
        var lengthSq = lineLengthX * lineLengthX + lineLengthY * lineLengthY;

        if (lengthSq == 0)
        {
            var distanceToPoint = Math
                .Sqrt((p.X - start.X) * (p.X - start.X) + (p.Y - start.Y) * (p.Y - start.Y)) - width * 0.5f;
            return distanceToPoint;
        }

        // Project point onto the line segment
        var normalizedProjection = ((p.X - start.X) * lineLengthX + (p.Y - start.Y) * lineLengthY) / lengthSq;
        normalizedProjection = Math.Max(0, Math.Min(1, normalizedProjection)); // Clamp to segment

        // Closest point on the segment
        var projectionX = start.X + normalizedProjection * lineLengthX;
        var projectionY = start.Y + normalizedProjection * lineLengthY;

        // Distance to closest point
        var distance = (float)Math.Sqrt(
            (p.X - projectionX) *
            (p.X - projectionX) + (p.Y - projectionY) *
            (p.Y - projectionY));

        return distance - width * 0.5f; // signed: negative inside the stroke
    }

    private bool CheckLineClicked(Point mouse, Icon icon) =>
        icon.Type == IconType.StraightLine &&
        LineSegmentSDF(mouse, icon.Points[0], icon.Points[1], 10f) < 0;

    private bool CheckUnitClicked(Point mouse, Icon icon) =>
        icon.Type == IconType.Unit &&
        mouse.X > icon.Points[0].X &&
        mouse.X < icon.Points[1].X &&
        mouse.Y > icon.Points[0].Y &&
        mouse.Y < icon.Points[1].Y;

    private async Task DragMove(MouseEventArgs args)
    {
        var pos = await JS
            .InvokeAsync<Point>("getLogicalMousePosition", "tacticsCanvas", args.ClientX, args.ClientY);
        var mouseX = pos.X;
        var mouseY = pos.Y;

        if ((!isDragging || draggingIcon == null) && !drawingShape && !isPanning)
        {
            return;
        }

        if (isPanning)
        {
            var dx = args.ClientX - panStartX;
            var dy = args.ClientY - panStartY;
            panX = panOriginX + dx;
            panY = panOriginY + dy;

            await JS.InvokeVoidAsync("setPan", panX, panY);
            return;
        }

        if (currentTool == IconType.StraightLine && drawingShape)
        {
            drawableIcon.Points[1] = pos;

            currentSlide.Icons.Add(drawableIcon);
            await JS.InvokeVoidAsync("draw", currentSlide.Icons);
            currentSlide.Icons.Remove(drawableIcon);
            return;
        }

        if (currentDraggingType == IconType.Unit)
        {
            draggingIcon.Points[0] = pos;
            draggingIcon.Points[1] = pos + new Point(40, 40);

            currentSlide.Icons.Add(draggingIcon);
            await JS.InvokeVoidAsync("dragIcon", mouseX, mouseY, currentSlide.Icons);
            currentSlide.Icons.Remove(draggingIcon);
        }
        else if (currentDraggingType == IconType.StraightLine && !drawingShape)
        {
            var delta = pos - lastLineDragPosition;

            draggingIcon.Points[0] = draggingIcon.Points[0] + delta;
            draggingIcon.Points[1] = draggingIcon.Points[1] + delta;

            lastLineDragPosition = pos;
            currentSlide.Icons.Add(draggingIcon);
            await JS.InvokeVoidAsync("dragIcon", mouseX, mouseY, currentSlide.Icons);
            currentSlide.Icons.Remove(draggingIcon);
        }
    }

    private async Task DragStop(MouseEventArgs args)
    {
        if (!isDragging && !drawingShape && !isPanning)
        {
            return;
        }

        if (isPanning && args.Button == 1)
        {
            isPanning = false;
            return;
        }


        if (currentTool == IconType.StraightLine && drawingShape)
        {
            drawingShape = false;
            currentSlide.Icons.Add(drawableIcon);
            await JS.InvokeVoidAsync("draw", currentSlide.Icons);
            await repo.CreateIcon(tactic, currentFolder.Id, currentSlide.Id, drawableIcon);
            return;
        }

        isDragging = false;
        currentSlide.Icons.Add(draggingIcon);
        await JS.InvokeVoidAsync("stopDrag");
        await JS.InvokeVoidAsync("draw", currentSlide.Icons);
        await repo.UpdateIcon(tactic, currentFolder.Id, currentSlide.Id, draggingIconIndex, draggingIcon);
        await UpdateTactic();
    }

    private async Task OnClickFolderRename(string folderID)
    {
        var folder = repo.GetFolder(tactic, folderID);
        var parameters = new DialogParameters<RenameDialog>
        {
            { "Name", folder!.Name }
        };

        var dialog = await DialogService.ShowAsync<RenameDialog>("Rename", parameters);
        var newName = (await dialog.Result)?.Data?.ToString();
        if (newName != null)
        {
            // it is infact a referece!
            folder.Name = newName;
            await repo.UpdateFolderName(tactic, folder.Id, newName);
            await UpdateTactic();
        }
    }

    private async Task OnSelectedSlideChange(Slide slide, Folder folder)
    {
        if (currentFolder != folder)
        {
            currentFolder = folder;
        }

        currentSlide = slide;
        await ReDrawCanvas();
    }

    private async Task OnClickSlideRename(string slideID, string folderID)
    {
        var slide = repo.GetSlide(tactic, currentFolder.Id, currentSlide.Id);
        var parameters = new DialogParameters<RenameDialog>
        {
            { "Name", slide!.Name }
        };

        var dialog = await DialogService.ShowAsync<RenameDialog>("Rename", parameters);
        var newName = (await dialog.Result)?.Data?.ToString();
        if (newName != null)
        {
            slide.Name = newName;
            await repo.UpdateSlideName(tactic, currentFolder.Id, currentSlide.Id, newName);
            await UpdateTactic();
        }
    }

    private async Task OnAddSlide(string folderID)
    {
        var newSlide = await repo.CreateSlide(tactic, folderID);
        tactic.Folders.Single(f => f.Id == folderID).Slides.Add(newSlide);
        await UpdateTactic();
    }

    private async Task OnClickTacticRename()
    {
        var parameters = new DialogParameters<RenameDialog>
        {
            { "Name", tactic.Name }
        };

        var dialog = await DialogService.ShowAsync<RenameDialog>("Rename", parameters);
        var newName = (await dialog.Result)!.Data!.ToString();
        if (newName != null)
        {
            tactic.Name = newName;
            await repo.UpdateTacticName(tactic, newName);
            await UpdateTactic();
        }
    }

    private async Task OnAddFolder()
    {
        var newFolder = await repo.CreateFolder(tactic);
        tactic.Folders.Add(newFolder);
        await UpdateTactic();
    }

    private async Task ReDrawCanvas()
    {
        await JS.InvokeVoidAsync("draw", currentSlide.Icons);
        await JS.InvokeVoidAsync("setBackground", currentSlide.MapPath);
    }

    private void ChangeTool(IconType selectedTool)
    {
        currentTool = selectedTool;
    }

    private void SetStartPointForArrow(Point pos)
    {
        drawableIcon = new Icon
        {
            Points = [pos, pos],
            FilePath = string.Empty,
            Type = IconType.StraightLine,
            Color = colorValue
        };
    }

    private async Task UpdateTactic()
    {
        if (hubConnection is not null)
        {
            Console.WriteLine($"Sending update for tactic {ID}");
            await hubConnection.SendAsync("UpdateTactic", ID, tactic, currentSlide.Id, currentFolder.Id);
        }
    }

    private async Task LockTactic()
    {
        if (hubConnection is not null)
        {
            Console.WriteLine($"Locking tactic {ID}");
            await hubConnection.SendAsync("LockTactic", ID, "currentUserId");
        }
    }

    private async Task UnlockTactic()
    {
        if (hubConnection is not null)
        {
            Console.WriteLine($"Unlocking tactic {ID}");
            await hubConnection.SendAsync("UnlockTactic", ID);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task MouseScroll(WheelEventArgs args)
    {
        zoomLevel -= args.DeltaY * 0.001; // Adjust the zoom speed as needed
        await SetZoom(zoomLevel);
    }

    private async Task SetZoom(double newZoom)
    {
        zoomLevel = Math.Max(0.1, newZoom);
        await JS.InvokeVoidAsync("setZoom", zoomLevel);
    }


    static string vectorLineIcon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><title>vector-line</title><path d=\"M15,3V7.59L7.59,15H3V21H9V16.42L16.42,9H21V3M17,5H19V7H17M5,17H7V19H5\" /></svg>";
    static string swordsIcon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><title>sword-cross</title><path d=\"M6.2,2.44L18.1,14.34L20.22,12.22L21.63,13.63L19.16,16.1L22.34,19.28C22.73,19.67 22.73,20.3 22.34,20.69L21.63,21.4C21.24,21.79 20.61,21.79 20.22,21.4L17,18.23L14.56,20.7L13.15,19.29L15.27,17.17L3.37,5.27V2.44H6.2M15.89,10L20.63,5.26V2.44H17.8L13.06,7.18L15.89,10M10.94,15L8.11,12.13L5.9,14.34L3.78,12.22L2.37,13.63L4.84,16.1L1.66,19.29C1.27,19.68 1.27,20.31 1.66,20.7L2.37,21.41C2.76,21.8 3.39,21.8 3.78,21.41L7,18.23L9.44,20.7L10.85,19.29L8.73,17.17L10.94,15Z\" /></svg>";
}