@page "/Tactics/{ID}"
@namespace Wildblood.Tactics.Components.Pages
@using MongoDB.Bson
@using Wildblood.Tactics.Entities
@using MongoDB.Driver;
@using Wildblood.Tactics.Models
@using Icon = Wildblood.Tactics.Entities.Icon
@using Wildblood.Tactics.Components.Layout
@inject IJSRuntime JS;
@inject IMongoDatabase Database;
@inject IDialogService DialogService
@rendermode InteractiveServer

<div class="parent">
    <div style="grid-area: 1/1/6/2;">
        <canvas id="tacticsCanvas" width="1200px" height="700px" style="border:1px solid #000000;" @onmousedown="drag" @onmouseup="dragStop" @onmousemove="dragMove"></canvas>
    </div>
    <div style="grid-area: 1/2/2/3;" id="MapSelectionDiv">
        <MudSelect T="string" Label="Maps" ValueChanged="MapChanged">
            @foreach (var dir in Directory.EnumerateFiles(baseMapPath, "*", SearchOption.AllDirectories).Select(f => Path.GetFileName(f).Split('.')[0]))
            {
                <MudSelectItem Value="@dir">@dir</MudSelectItem>
            }
        </MudSelect>
    </div>
    <div style="grid-area: 2/2/3/3;">
        <MudPaper Class="flex-wrap d-flex" Width="300px">
            @foreach (var dir in Directory.EnumerateFiles(baseUnitPath, "*", SearchOption.AllDirectories).Select(f => Path.GetFileName(f)))
            {
                <MudPaper Class="ma-1" @onclick="@(async (args) => await selectedUnitChanged(dir))">
                    <img src="/ConquerorsBladeData/Units/@dir" height="40" width="40" />
                </MudPaper>

            }
        </MudPaper>
    </div>
    <div style="grid-area: 5/2/6/4">
        <MudPaper>
            <MudTreeView T="Tactic" Hover="true" Dense="true" ExpandOnClick="true"> 
                <MudTreeViewItem Icon="@Icons.Material.Outlined.Map">
                    <BodyContent>
                        <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                            <MudText>@tactic.Name</MudText>
                            <div style="justify-self: end;">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="@(async (args) => await onClickTacticRename())" />
                                <MudIconButton Icon="@Icons.Material.Filled.AddBox" @onclick="@(async (args) => await OnAddFolder())" />
                            </div>
                        </div>
                    </BodyContent>
                    <ChildContent>
                        @foreach(var folder in tactic.Folders)
                        {
                            <MudTreeViewItem Icon="@Icons.Material.Filled.Folder">
                                <BodyContent>
                                    <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                        <MudText>@folder.Name</MudText>
                                        <div style="justify-self: end;">
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="@(async (args) => await OnClickFolderRename(folder.Id))" />
                                            <MudIconButton Icon="@Icons.Material.Filled.AddBox" @onclick="@(async (args) => await OnAddSlide(folder.Id))" />
                                        </div>
                                    </div>
                                </BodyContent>
                                <ChildContent>
                                    @foreach (var slide in folder.Slides)
                                    {
                                        <MudTreeViewItem  Icon="@Icons.Material.Filled.Notes" @onclick="@(async (args) => await OnSelectedSlideChange(slide, folder))">
                                            <BodyContent>
                                                <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                                    <MudText >@slide.Name</MudText>
                                                    <div style="justify-self: end;">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="@(async (args) => await onclickSlideRename(slide.Id, folder.Id))"/>
                                                    </div>
                                                </div>
                                            </BodyContent>
                                        </MudTreeViewItem>
                                    }
                                </ChildContent>
                            </MudTreeViewItem>
                        }
                    </ChildContent>
                </MudTreeViewItem>
            </MudTreeView>
        </MudPaper>
    </div>
</div>

@code {

    [Parameter]
    public string? ID { get; set; }

    private Tactic? tactic;

    private Slide currentSlide;
    private Folder currentFolder;

    private static string baseMapPath = "wwwroot/ConquerorsBladeData/Maps";
    private static string baseUnitPath = "wwwroot/ConquerorsBladeData/Units";
    private string? selectedUnit;
    private IMongoCollection<Tactic>? collection;

    private Icon? draggingIcon;
    private bool isDragging = false;
    private int draggingIconIndex;

    protected override async void OnParametersSet()
    {
        if (ID != null)
        {
            collection = Database.GetCollection<Tactic>("Tactics");
            tactic = collection.Find(t => t.Id == ID).FirstOrDefault();
            currentFolder = tactic.Folders[0];
            currentSlide = currentFolder.Slides[0];

            
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) 
        {
            if (currentSlide.MapPath != null)
            {
                await JS.InvokeVoidAsync("setBackground", currentSlide.MapPath);
            }

            if (currentSlide.Icons.Any())
            {
                await JS.InvokeVoidAsync("draw", currentSlide.Icons);
            }
        }
    }

    public Task selectedUnitChanged(string unit)
    {
        selectedUnit = unit;
        return Task.CompletedTask;
    }

    public async Task MapChanged(string map)
    {
        currentSlide.MapPath = map;
        await JS.InvokeVoidAsync("setBackground", map);
        var filter = Builders<Tactic>.Filter.Eq(t => t.Id, tactic.Id);
        var folderIndex = tactic.Folders.FindIndex(f => f.Id == currentFolder.Id);
        var slideIndex = tactic.Folders[folderIndex].Slides.FindIndex(s => s.Id == currentSlide.Id);
        var update = Builders<Tactic>.Update.Set(t => t.Folders[folderIndex].Slides[slideIndex].MapPath, map);
        await collection.UpdateOneAsync(filter, update);
    }


    private async Task placeIcon(MouseEventArgs eventArgs)
    {
        var unit = new Icon(eventArgs.OffsetX, eventArgs.OffsetY, "/ConquerorsBladeData/Units/" + selectedUnit);

        await JS.InvokeVoidAsync("placeIcon", unit);

        currentSlide.Icons.Add(unit);
        var folderIndex = tactic.Folders.FindIndex(f => f.Id == currentFolder.Id);
        var slideIndex = tactic.Folders[folderIndex].Slides.FindIndex(s => s.Id == currentSlide.Id);
        var filter = Builders<Tactic>.Filter.Eq(t => t.Id, tactic.Id);
        var update = Builders<Tactic>.Update.Push(t => t.Folders[folderIndex].Slides[slideIndex].Icons, unit);
        await collection.UpdateOneAsync(filter, update);

    }

    private async Task drag(MouseEventArgs eventArgs)
    {
        var mouseX = eventArgs.OffsetX;
        var mouseY = eventArgs.OffsetY;

        foreach (var icon in currentSlide.Icons)
        {
            if (mouseX > icon.X && mouseX < icon.X + icon.Width && mouseY > icon.Y && mouseY < icon.Y + icon.Height)
            {
                draggingIcon = new Icon(icon.X, icon.Y, icon.FilePath, icon.Height, icon.Width);
                draggingIconIndex = currentSlide.Icons.IndexOf(icon);
                isDragging = true;
                currentSlide.Icons.Remove(icon);
                return;
            }
        }

        await placeIcon(eventArgs);

    }

    private async Task dragMove(MouseEventArgs args)
    {
        if (!isDragging || draggingIcon == null)
        {
            return;
        }
        draggingIcon.X = args.OffsetX;
        draggingIcon.Y = args.OffsetY;
        currentSlide.Icons.Add(draggingIcon);
        await JS.InvokeVoidAsync("draw", currentSlide.Icons);
        currentSlide.Icons.Remove(draggingIcon);
    }

    private async Task dragStop()
    {
        if (!isDragging)
        {
            return;
        }
        isDragging = false;
        currentSlide.Icons.Add(draggingIcon);
        await JS.InvokeVoidAsync("draw", currentSlide.Icons);
        var folderIndex = tactic.Folders.FindIndex(f => f.Id == currentFolder.Id);
        var slideIndex = tactic.Folders[folderIndex].Slides.FindIndex(s => s.Id == currentSlide.Id);
        var filter = Builders<Tactic>.Filter.Eq(t => t.Id, tactic.Id);
        var update = Builders<Tactic>.Update.Set(t => t.Folders[folderIndex].Slides[slideIndex].Icons[draggingIconIndex], draggingIcon);
        await collection.UpdateOneAsync(filter, update);

    }

    private async Task OnClickFolderRename(string folderID)
    {
        var folder = tactic.Folders.First(f => f.Id == folderID);
        var parameters = new DialogParameters<RenameDialog>
        {
            { "Name", folder.Name }
        };

        var dialog = await DialogService.ShowAsync<RenameDialog>("Rename", parameters);
        var newName = (await dialog.Result).Data.ToString();
        if (newName != null)
        {
            // it is infact a referece!
            folder.Name = newName;
            var filter = Builders<Tactic>.Filter.Eq(t => t.Id, tactic.Id);

            var folderIndex = tactic.Folders.FindIndex(f => f.Id == folderID);

            var update = Builders<Tactic>.Update.Set(t => t.Folders[folderIndex].Name, newName);
            await collection.UpdateOneAsync(filter, update);
        }
    }

    private async Task OnSelectedSlideChange(Slide slide, Folder folder)
    {
        if (currentFolder != folder)
        {
            currentFolder = folder;
        }

        currentSlide = slide;
        await ReDrawCanvas();

    }

    private async Task onclickSlideRename(string slideID, string folderID) 
    {
        var slide = tactic.Folders.Single(f => f.Id == folderID).Slides.Single(s => s.Id == slideID);
        var parameters = new DialogParameters<RenameDialog>
        {
            { "Name", slide.Name }
        };

        var dialog = await DialogService.ShowAsync<RenameDialog>("Rename", parameters);
        var newName = (await dialog.Result).Data.ToString();
        if (newName != null) 
        {
            slide.Name = newName;
            var filter = Builders<Tactic>.Filter.Eq(t => t.Id, tactic.Id);

            var folderIndex = tactic.Folders.FindIndex(f => f.Id == folderID);
            var slideIndex = tactic.Folders[folderIndex].Slides.FindIndex(s => s.Id == slideID);

            var update = Builders<Tactic>.Update.Set(t => t.Folders[folderIndex].Slides[slideIndex].Name, newName);
            await collection.UpdateOneAsync(filter, update);
        }
    }

    private async Task OnAddSlide(string folderID)
    {
        var newSlide = new Slide
        {
            Id = ObjectId.GenerateNewId().ToString(),
            Name = "New Slide",
            MapPath = null,
            Icons = new List<Icon>()
        };
        var filter = Builders<Tactic>.Filter.Eq(t => t.Id, tactic.Id) & Builders<Tactic>.Filter.ElemMatch(t => t.Folders, f => f.Id == folderID);
        var folderIndex = tactic.Folders.FindIndex(f => f.Id == folderID);
        var update = Builders<Tactic>.Update.Push(t => t.Folders[folderIndex].Slides, newSlide);
        await collection.UpdateOneAsync(filter, update);
        tactic.Folders.Single(f => f.Id == folderID).Slides.Add(newSlide);

    }

    private async Task onClickTacticRename() 
    {
        var parameters = new DialogParameters<RenameDialog>
        {
            { "Name", tactic.Name }
        };

        var dialog = await DialogService.ShowAsync<RenameDialog>("Rename", parameters);
        var newName = (await dialog.Result).Data.ToString();
        if (newName != null)
        {
            tactic.Name = newName;
            //TODO currently im always replacing the entire document. Not good.
            var filter = Builders<Tactic>.Filter.Eq(t => t.Id, tactic.Id);
            var update = Builders<Tactic>.Update.Set(t => t.Name, newName);
            await collection.UpdateOneAsync(filter, update);
        }
    }

    private async Task OnAddFolder() 
    {
        var newFolder = new Folder
            {
                Id = ObjectId.GenerateNewId().ToString(),
                Name = "New Folder",
                Slides = new List<Slide>(),
            };
        var filter = Builders<Tactic>.Filter.Eq(t => t.Id, tactic.Id);
        var update = Builders<Tactic>.Update.Push(t => t.Folders, newFolder);
        await collection.UpdateOneAsync(filter, update);
        tactic.Folders.Add(newFolder);
    }

    private async Task ReDrawCanvas() 
    {
        await JS.InvokeVoidAsync("draw", currentSlide.Icons);
        await JS.InvokeVoidAsync("setBackground", currentSlide.MapPath);
    }
}
