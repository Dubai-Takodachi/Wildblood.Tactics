@page "/tactics/{ID}"
@namespace Wildblood.Tactics.Components.Pages
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using MongoDB.Bson
@using System.Text.Json
@using Wildblood.Tactics.Entities
@using MongoDB.Driver;
@using Wildblood.Tactics.Models
@using Icon = Wildblood.Tactics.Entities.Icon
@using Wildblood.Tactics.Components.Layout
@using Wildblood.Tactics.Services
@inject IJSRuntime JS;
@inject IDialogService DialogService;
@inject NavigationManager NavigationManager
@inject ITacticRepository repo;
@inject ITacticsCanvasService tacticsCanvasService;
@inject IUserService userService;

@rendermode InteractiveServer

<div class="parent">
    <Wildblood.Tactics.Components.MainPage.TacticsCanvas/>
    <MudCard Style="grid-area: 1/2/6/3">
        <div id="MapSelectionDiv">
            <MudSelect T="string" Label="Maps" ValueChanged="MapChanged">
                @foreach (var map in maps)
                {
                    <MudSelectItem Value="@map">@map</MudSelectItem>
                }
            </MudSelect>
        </div>
        <MudPaper style="grid-area:2/2/span 3/2">
            <MudTabs MinimumTabWidth="20px">
                <MudTabPanel Icon="@swordsIcon" @onclick="() => ChangeTool(IconType.Unit)">
                    <div>
                        @*Unit*@
                        <MudPaper Class="flex-wrap d-flex" Width="300px">
                            @foreach (var unit in units)
                            {
                                <MudPaper Class="ma-1" @onclick="@(async (args) => await SelectedUnitChanged(unit))">
                                    <img src="/ConquerorsBladeData/Units/@unit" height="40" width="40" />
                                </MudPaper>
                            }
                        </MudPaper>
                    </div>
                </MudTabPanel>
                <MudTabPanel Icon="@vectorLineIcon" @onclick="() => ChangeTool(IconType.StraightLine)">
                    <MudPaper>
                        <MudColorPicker Label="Line Color" @bind-Text="tacticsCanvasService.SelectedColorValue" />
                    </MudPaper>
                </MudTabPanel>
                <MudTabPanel Icon="@curveIcon" @onclick="() => ChangeTool(IconType.CurveLine)">
                    <MudPaper>
                        <MudColorPicker Label="Line Color" @bind-Text="tacticsCanvasService.SelectedColorValue" />
                    </MudPaper>
                </MudTabPanel>
            </MudTabs>
        </MudPaper>


        <div style="grid-area: 5/2/span 3/2; overflow-y: scroll; min-height:200px">
            <MudPaper>
                <MudTreeView T="Tactic" Hover="true" Dense="true" ExpandOnClick="true">
                    <MudTreeViewItem Icon="@Icons.Material.Outlined.Map">
                        <BodyContent>
                            <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                <MudText>@tacticsCanvasService.CurrentTactic.Name</MudText>
                                <div style="justify-self: end;">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="@(async (args) => await OnClickTacticRename())" />
                                    <MudIconButton Icon="@Icons.Material.Filled.AddBox" @onclick="@(async (args) => await OnAddFolder())" />
                                </div>
                            </div>
                        </BodyContent>
                        <ChildContent>
                            @foreach (var folder in tacticsCanvasService.CurrentTactic.Folders)
                            {
                                <MudTreeViewItem Icon="@Icons.Material.Filled.Folder">
                                    <BodyContent>
                                        <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                            <MudText>@folder.Name</MudText>
                                            <div style="justify-self: end;">
                                                <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="@(async (args) => await OnClickFolderRename(folder.Id))" />
                                                <MudIconButton Icon="@Icons.Material.Filled.AddBox" @onclick="@(async (args) => await OnAddSlide(folder.Id))" />
                                            </div>
                                        </div>
                                    </BodyContent>
                                    <ChildContent>
                                        @foreach (var slide in folder.Slides)
                                        {
                                            <MudTreeViewItem Icon="@Icons.Material.Filled.Notes" @onclick="@(async (args) => await OnSelectedSlideChange(slide, folder))">
                                                <BodyContent>
                                                    <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                                        <MudText>@slide.Name</MudText>
                                                        <div style="justify-self: end;">
                                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="@(async (args) => await OnClickSlideRename(slide.Id, folder.Id))" />
                                                        </div>
                                                    </div>
                                                </BodyContent>
                                            </MudTreeViewItem>
                                        }
                                    </ChildContent>
                                </MudTreeViewItem>
                            }
                        </ChildContent>
                    </MudTreeViewItem>
                </MudTreeView>
            </MudPaper>
            <MudPaper>
                <MudIconButton Icon="@Icons.Material.Filled.ZoomOut" @onclick="() => SetZoom(zoomLevel - 0.1)"></MudIconButton>
                <span>@zoomLevel.ToString("0.0")x</span>
                <MudIconButton Icon="@Icons.Material.Filled.ZoomIn" @onclick="() => SetZoom(zoomLevel + 0.1)">+</MudIconButton>
            </MudPaper>
            <MudPaper>
                <MudButton Color="Color.Primary" OnClick="ShowMemberList">Member List</MudButton>
            </MudPaper>
        </div>
    </MudCard>
</div>

@code {

    [Parameter]
    public string? ID { get; set; }

    private static string baseMapPath = "wwwroot/ConquerorsBladeData/Maps";
    private static string baseUnitPath = "wwwroot/ConquerorsBladeData/Units";

    private List<string> maps = new List<string>();
    private List<string> units = new List<string>();
    private double zoomLevel = 1.0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        maps = Directory.EnumerateFiles(baseMapPath, "*", SearchOption.AllDirectories)
            .Select(f => Path.GetFileName(f)
            .Split('.')[0])
            .ToList();
        units = Directory.EnumerateFiles(baseUnitPath, "*", SearchOption.AllDirectories)
            .Select(f => Path.GetFileName(f))
            .ToList();
    }

    protected override void OnParametersSet()
    {
        if (ID != null)
        {
            tacticsCanvasService.CurrentTactic = repo.GetTactic(ID) ?? throw new Exception("Could not load tactic");
            tacticsCanvasService.CurrentFolder = tacticsCanvasService.CurrentTactic.Folders[0];
            tacticsCanvasService.CurrentSlide = tacticsCanvasService.CurrentFolder.Slides[0];
            tacticsCanvasService.SelectedColorValue = "#000000";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setCanvasSize", "tacticsCanvas");
            var imageFilePaths = Directory.EnumerateFiles(baseUnitPath, "*.*", SearchOption.AllDirectories)
                .Where(file => new[] { ".png", ".jpg", ".jpeg", ".gif", ".bmp" }.Contains(Path.GetExtension(file).ToLower()))
                .Select(file => file.Replace("wwwroot", ""))
                .ToList();
            await JS.InvokeVoidAsync("preLoadImages", imageFilePaths);
            if (tacticsCanvasService.CurrentSlide.MapPath != null)
            {
                await JS.InvokeVoidAsync("setBackground", tacticsCanvasService.CurrentSlide.MapPath);
            }
        }
    }

    public Task SelectedUnitChanged(string unit)
    {
        tacticsCanvasService.SelectedUnit = unit;
        return Task.CompletedTask;
    }

    public async Task MapChanged(string map)
    {
        tacticsCanvasService.CurrentSlide.MapPath = map;
        await JS.InvokeVoidAsync("setBackground", map);
        await repo.UpdateMap(tacticsCanvasService.CurrentTactic, tacticsCanvasService.CurrentFolder.Id, tacticsCanvasService.CurrentSlide.Id, map);
        await tacticsCanvasService.UpdateServerTactic();
    }

    private async Task OnClickFolderRename(string folderID)
    {

        if (!(await userService.CheckHasEditAcces(tacticsCanvasService.CurrentTactic)))
        {
            return;
        }

        var folder = repo.GetFolder(tacticsCanvasService.CurrentTactic, folderID);

        var parameters = new DialogParameters<RenameDialog>
        {
            { "Name", folder!.Name }
        };

        var dialog = await DialogService.ShowAsync<RenameDialog>("Rename", parameters);
        var newName = (await dialog.Result)?.Data?.ToString();
        if (newName != null)
        {
            // it is infact a referece!
            folder.Name = newName;
            await repo.UpdateFolderName(tacticsCanvasService.CurrentTactic, folder.Id, newName);
            await tacticsCanvasService.UpdateServerTactic();
        }
    }

    private async Task OnSelectedSlideChange(Slide slide, Folder folder)
    {
        if (tacticsCanvasService.CurrentFolder != folder)
        {
            tacticsCanvasService.CurrentFolder = folder;
        }

        tacticsCanvasService.CurrentSlide = slide;
        await tacticsCanvasService.SetNeedsRedraw();
    }

    private async Task OnClickSlideRename(string slideID, string folderID)
    {
        if (!(await userService.CheckHasEditAcces(tacticsCanvasService.CurrentTactic)))
        {
            return;
        }

        var slide = repo.GetSlide(tacticsCanvasService.CurrentTactic, tacticsCanvasService.CurrentFolder.Id, tacticsCanvasService.CurrentSlide.Id);

        var parameters = new DialogParameters<RenameDialog>
        {
            { "Name", slide!.Name }
        };

        var dialog = await DialogService.ShowAsync<RenameDialog>("Rename", parameters);
        var newName = (await dialog.Result)?.Data?.ToString();
        if (newName != null)
        {
            slide.Name = newName;
            await repo.UpdateSlideName(tacticsCanvasService.CurrentTactic, tacticsCanvasService.CurrentFolder.Id, tacticsCanvasService.CurrentSlide.Id, newName);
            await tacticsCanvasService.UpdateServerTactic();
        }
    }

    private async Task OnAddSlide(string folderID)
    {
        if (!(await userService.CheckHasEditAcces(tacticsCanvasService.CurrentTactic)))
        {
            return;
        }

        var newSlide = await repo.CreateSlide(tacticsCanvasService.CurrentTactic, folderID);

        tacticsCanvasService.CurrentTactic.Folders.Single(f => f.Id == folderID).Slides.Add(newSlide);
        await tacticsCanvasService.UpdateServerTactic();
    }

    private async Task OnClickTacticRename()
    {
        if (!(await userService.CheckHasEditAcces(tacticsCanvasService.CurrentTactic)))
        {
            return;
        }

        var parameters = new DialogParameters<RenameDialog>
        {
            { "Name", tacticsCanvasService.CurrentTactic.Name }
        };

        var dialog = await DialogService.ShowAsync<RenameDialog>("Rename", parameters);
        var newName = (await dialog.Result)!.Data!.ToString();
        if (newName != null)
        {
            tacticsCanvasService.CurrentTactic.Name = newName;
            await repo.UpdateTacticName(tacticsCanvasService.CurrentTactic, newName);
            await tacticsCanvasService.UpdateServerTactic();
        }
    }

    private async Task OnAddFolder()
    {
        if (!(await userService.CheckHasEditAcces(tacticsCanvasService.CurrentTactic)))
        {
            return;
        }
        
        var newFolder = await repo.CreateFolder(tacticsCanvasService.CurrentTactic);
        tacticsCanvasService.CurrentTactic.Folders.Add(newFolder);
        await tacticsCanvasService.UpdateServerTactic();
    }

    private void ChangeTool(IconType selectedTool)
    {
        tacticsCanvasService.EditMode = selectedTool;
        ////drawableIcon = null!;
    }

    private async Task ShowMemberList()
    {
        if (!(await userService.CheckHasEditAcces(tacticsCanvasService.CurrentTactic)))
        {
            return;
        }

        var parameters = new DialogParameters<MemberListDialog>
        {
            { "Members", tacticsCanvasService.CurrentTactic.Members }
        };

        var dialog = await DialogService.ShowAsync<MemberListDialog>("Member List", parameters);
        var result = (await dialog.Result)!.Data!;
        var newMemberList = result as List<MemberRole>;

        if (newMemberList != null)
        {
            tacticsCanvasService.CurrentTactic.Members = newMemberList;
            await repo.UpdateMemberList(tacticsCanvasService.CurrentTactic, newMemberList);
        }
    }

    private async Task MouseScroll(WheelEventArgs args)
    {
        zoomLevel -= args.DeltaY * 0.001; // Adjust the zoom speed as needed
        await SetZoom(zoomLevel);
    }

    private async Task SetZoom(double newZoom)
    {
        zoomLevel = Math.Max(0.1, newZoom);
        await JS.InvokeVoidAsync("setZoom", zoomLevel);
    }

    static string curveIcon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><title>vector-curve</title><path d=\"M18.5,2A1.5,1.5 0 0,1 20,3.5A1.5,1.5 0 0,1 18.5,5C18.27,5 18.05,4.95 17.85,4.85L14.16,8.55L14.5,9C16.69,7.74 19.26,7 22,7L23,7.03V9.04L22,9C19.42,9 17,9.75 15,11.04A3.96,3.96 0 0,1 11.04,15C9.75,17 9,19.42 9,22L9.04,23H7.03L7,22C7,19.26 7.74,16.69 9,14.5L8.55,14.16L4.85,17.85C4.95,18.05 5,18.27 5,18.5A1.5,1.5 0 0,1 3.5,20A1.5,1.5 0 0,1 2,18.5A1.5,1.5 0 0,1 3.5,17C3.73,17 3.95,17.05 4.15,17.15L7.84,13.45C7.31,12.78 7,11.92 7,11A4,4 0 0,1 11,7C11.92,7 12.78,7.31 13.45,7.84L17.15,4.15C17.05,3.95 17,3.73 17,3.5A1.5,1.5 0 0,1 18.5,2M11,9A2,2 0 0,0 9,11A2,2 0 0,0 11,13A2,2 0 0,0 13,11A2,2 0 0,0 11,9Z\"/></svg>";
    static string vectorLineIcon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><title>vector-line</title><path d=\"M15,3V7.59L7.59,15H3V21H9V16.42L16.42,9H21V3M17,5H19V7H17M5,17H7V19H5\" /></svg>";
    static string swordsIcon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><title>sword-cross</title><path d=\"M6.2,2.44L18.1,14.34L20.22,12.22L21.63,13.63L19.16,16.1L22.34,19.28C22.73,19.67 22.73,20.3 22.34,20.69L21.63,21.4C21.24,21.79 20.61,21.79 20.22,21.4L17,18.23L14.56,20.7L13.15,19.29L15.27,17.17L3.37,5.27V2.44H6.2M15.89,10L20.63,5.26V2.44H17.8L13.06,7.18L15.89,10M10.94,15L8.11,12.13L5.9,14.34L3.78,12.22L2.37,13.63L4.84,16.1L1.66,19.29C1.27,19.68 1.27,20.31 1.66,20.7L2.37,21.41C2.76,21.8 3.39,21.8 3.78,21.41L7,18.23L9.44,20.7L10.85,19.29L8.73,17.17L10.94,15Z\" /></svg>";
}