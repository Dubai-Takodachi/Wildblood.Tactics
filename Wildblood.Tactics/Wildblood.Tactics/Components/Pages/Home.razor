@page "/"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using MongoDB.Driver;
@using MongoDB.Bson;
@using Wildblood.Tactics.Entities
@using Wildblood.Tactics.Models
@attribute [Authorize]
@inject IMongoDatabase  Database;
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <div>
            <h1>Welcome To Wildblood.Tactics!</h1>
            <input type="button" class="btn btn-primary" value="Create New Tactic" @onclick="CreateNewTactic" />
        </div>
    </Authorized>
</AuthorizeView>

@code {

    private async Task CreateNewTactic()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true) 
        {
            var userId = user.FindFirst(c => c.Type == "sub")?.Value ?? user.FindFirst(c => c.Type == "nameidentifier")?.Value ?? user.Identity.Name;
            var tactic = CreateTacticDocument(userId, user.Identity.Name);
            var collection = Database.GetCollection<Tactic>("Tactics");
            collection.InsertOne(tactic);
            NavigationManager.NavigateTo("/tactics/" + tactic.Id);
        }
    }

    private Tactic CreateTacticDocument(string user, string userName) {
        return new Tactic
            {
                Id = ObjectId.GenerateNewId().ToString(),
                Name = "New Tactic",
                UserId = user,
                Folders = new List<Folder> {
                    new Folder {
                        Id = ObjectId.GenerateNewId().ToString(),
                        Name = "Folder 1",
                        Slides = new List<Slide> {
                            new Slide {
                                Id = ObjectId.GenerateNewId().ToString(),
                                Name = "Slide 1",
                                Icons = new List<Icon>(),
                            }
                        }
                    }
                },
                Members = new List<MemberRole>
                {
                    new MemberRole
                    {
                        Name = userName,
                        Roles = Role.Owner,
                    }
                },
               
            };

    }
}