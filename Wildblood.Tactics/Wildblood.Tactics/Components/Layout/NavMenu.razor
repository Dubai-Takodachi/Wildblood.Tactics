@implements IDisposable

@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Wildblood.Tactics</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<MudNavMenu Color="Color.Primary" Dense="true" Rounded="true">
    <MudNavLink href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">
        Home
    </MudNavLink>

    <MudNavLink href="/auth">
        Auth Required
    </MudNavLink>

    <AuthorizeView>
        <Authorized>
            <MudNavLink href="/Account/Manage">
                @context.User.Identity?.Name
            </MudNavLink>
            <MudNavLink href="/SavedTactics" Icon="@Icons.Material.Filled.Map">
                Saved Tactics
            </MudNavLink>
            <MudNavLink >
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <MudButton ButtonType="ButtonType.Submit" class="nav-link">
                        <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                    </MudButton>
                </form>
            </MudNavLink>
        </Authorized>
        <NotAuthorized>
            <MudNavLink  href="/Account/Register">
                Register
            </MudNavLink>
            <MudNavLink  href="/Account/Login">
                Login
            </MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

